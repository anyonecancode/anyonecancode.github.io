{"data":{"markdownRemark":{"html":"<p>Let's say we have an application where, in general, it makes sense to use a relational database. As an example, let's pretend we're running a coffee shop and our system takes care of managing inventory. We put this inventory data to a lot of different uses, from customer-facing use cases like building our menues to business-related use cases like budgeting and deciding what we should buy or not buy. A relational database is a nice fit here as, for each different type of use case, we're interested in different attributes of our data, and we want the flexibility to query our data based on different combinations of those attributes.</p>\n<p>For instance, a coffee cake might have these attributes:</p>\n<pre><code>Name: Can't Resist Coffee Cake\nCategory: Food\nSub Category: Baked Goods\nSupplier: Pop Up Cafe Supply Co.\nCost: 2.00 USD\nCustomer Price: 3.50 USD\nDescription: One of our best sellers, this perfectly-textured,\n  just-the-right-sweetness coffee cake is the perfect accompaniment\n  to your morning joe!\n</code></pre>\n<p>Having only ever eaten at bakeries rather than worked at one, the prices here are probably off, and undoubtedly there are other attributes we'd want to capture (such as nutritional information), but this will work for illustrative purposes.</p>\n<p>Translating this to database table, we might get something like this:</p>\n<pre><code>table: goods\nid   | category | sub_cat | supplier | cost_amt | cost_curr | customer_price_amt | customer_price_curr | description\n------------------------------------------------------------------------------------------------------------------\nUUID | FK      | FK       | FK       | numeric(10,2) | ENUM | numeric(10,2) | ENUM | Text\n</code></pre>\n<p>One thing I think it's worth briefly calling attention to here is the treatment of money. There's quite a bit of nuance involved and it's easy to get wrong. One of the best articles I've seen covering this is <a href=\"https://frontstuff.io/how-to-handle-monetary-values-in-javascript\">How to Handle Monetary Values in JavaScript</a> by Sarah Dayan. Although that article focused on JS, the principles she covers are widely applicable. The brief takeaways are to always treat money as having both a numeric and currency portion, and to pay attention to your math.</p>\n<p>Returning to our coffee shop example, things seem in order. The current state of our inventory is in an easily queryable, nicely normalized form. Assuming we also have tables to record orders placed, items sold, and so forth, the past state of our inventory is also accessible. What abouth that description field, though? As I noted at the start of this post, in this example this system not only helps us manage business processes like inventory tracking, it also powers the menus. If we change the description in our current approach, that will instantly flow through to the menu as well. Maybe that's what we want, but it puts a lot of pressure on whoever is editing that description -- don't hit \"save\" until the description is exactly right!</p>\n<p>Perhaps what we need is a \"drafts\" table to store data-in-progress that we don't want reflected across the rest of our system yet.\nThere's a few approaches we could take here. For instance, we could create a \"drafts\" table that replicates all the information in </p>\n<p>offers two json data types:</p>\n<p>When its in draft form, its not really relational data. Document store. With postgres, you can</p>","frontmatter":{"date":"January 20, 2018","path":"/posts/jsonb-drafts","title":"PostgreSQL Jsonb Use Case: Saving Drafts"}}},"pageContext":{}}