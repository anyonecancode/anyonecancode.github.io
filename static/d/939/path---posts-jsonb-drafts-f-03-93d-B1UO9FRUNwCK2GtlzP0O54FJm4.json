{"data":{"markdownRemark":{"html":"<p>Let's say we have an application where it generally makes sense to use a relational database. For instance, say we're running a coffee shop and our system takes care of managing inventory. We put this data to a lot of different uses, from customer-facing ones like displaying a menu to business-related purposes like deciding what what to include in next week's order. A relational database is a nice fit here as it gives us the flexibility to query on different combinations of attributes.</p>\n<p>A coffee cake might have these attributes:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-yaml line-numbers\"><code class=\"language-yaml\"><span class=\"token key atrule\">Name</span><span class=\"token punctuation\">:</span> Can't Resist Coffee Cake\n<span class=\"token key atrule\">Category</span><span class=\"token punctuation\">:</span> Food\n<span class=\"token key atrule\">Sub_Category</span><span class=\"token punctuation\">:</span> Baked Goods\n<span class=\"token key atrule\">Supplier</span><span class=\"token punctuation\">:</span> Pop Up Cafe Supply Co.\n<span class=\"token key atrule\">Cost</span><span class=\"token punctuation\">:</span> 2.00 USD\nCustomer Price<span class=\"token punctuation\">:</span> 3.50 USD\n<span class=\"token key atrule\">Description</span><span class=\"token punctuation\">:</span> One of our best sellers<span class=\"token punctuation\">,</span> this perfectly<span class=\"token punctuation\">-</span>textured<span class=\"token punctuation\">,</span>\n  just<span class=\"token punctuation\">-</span>the<span class=\"token punctuation\">-</span>right<span class=\"token punctuation\">-</span>sweetness coffee cake is the perfect accompaniment\n  to your morning joe!</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>(Having only ever eaten at bakeries rather than worked at one, I'm sure my prices here are off, and that there'd be other attributes such as nutritional information we'd want to include, but this should work for illustrative purposes.)</p>\n<p>Translating this to a database table, we might get something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\"> Table &quot;goods&quot;\n     Column     |          Type\n----------------+------------------------+\n id             | integer                |\n category       | integer                |\n sub_cat        | integer                |\n supplier       | integer                |\n cost_amt       | numeric(10,2)          |\n cost_curr      | currency               |\n customer_price | numeric(10,2)          |\n customer_curr  | currency               |\n name           | character varying(128) |\n description    | text                   |\nIndexes:\n    &quot;goods_pkey&quot; PRIMARY KEY, btree (id)\nForeign-key constraints:\n    &quot;category&quot; FOREIGN KEY (category) REFERENCES categories(id)\n    &quot;sub_cat&quot; FOREIGN KEY (sub_cat) REFERENCES sub_categories(id)</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>And would look like this:\ntable: goods</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">id  | category | sub_cat | supplier | cost_amt | cost_curr | customer_price_amt | customer_price_curr | description\n------------------------------------------------------------------------------------------------------------------\n463 | 2        |  4      | 3        |  2.00    | USD        |  3.50             | USD                  |  One of...</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>Everything seems in order. The current state of our inventory is in an easily queryable, nicely normalized form. Assuming we also have tables to record orders placed, items sold, and so forth, the past state of our inventory is also accessible.</p>\n<p>What about that description field, though? As I noted at the start of this post, in this example this system not only helps us manage business processes like inventory tracking, it also powers the menu. If we change the description in our current approach, that will instantly flow through to the menu as well. Maybe that's what we want, but it puts a lot of pressure on whoever is editing that description—don't hit \"save\" until the description is exactly right!</p>\n<p>What we need is a \"drafts\" table to store data-in-progress that we don't want reflected across the rest of our system yet. What should this table look like? Maybe we should just copy over the <code class=\"language-text\">goods</code> table and add a few colums specific to tracking drafts:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">table: goods_drafts\ndraft_id | good_id | created | all the columns from the goods table....\n--------------------------------</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>This works but feels a bit heavy. Do we really need to duplicate all the columns from the <code class=\"language-text\">goods</code> table? We never query on or update those columns when working with drafts. A draft is essentially immutable—we store any changes as a brand new entry in the table and we only ever read, not modify, previous versions.</p>\n<p>Put another way, there's nothing especially <em>relational</em> about a draft. Normalizing our database schema makes it easier to sort, filter, and aggregate, but these use cases don't apply here. All we really want to do when saving a draft is to store the state of the record at that point in time, as a \"blob\" of data, if you will.</p>\n<p>Applying this insight, let's take a different approach. Instead of replicating the <code class=\"language-text\">goods</code> table in <code class=\"language-text\">goods_drafts</code>, we can just store the contents of the draft as a JSON object:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">draft_id | good_id | created | draft\n____________________________________\nBigInt   | FK      | timestamp | jsonb</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>PostgreSQL actually <a href=\"https://www.postgresql.org/docs/current/datatype-json.html\">offers</a> two JSON types: <code class=\"language-text\">json</code> and <code class=\"language-text\">jsonb</code>. The <code class=\"language-text\">json</code> type is essentially just a variant on the <code class=\"language-text\">text</code> type with some additional validation, whereas <code class=\"language-text\">jsonb</code> internally converts the values of JSON fields to their equivalent PostgreSQL datatypes. This makes for much more efficient storage and enable indexing and <a href=\"https://www.postgresql.org/docs/current/datatype-json.html#JSON-CONTAINMENT\">containment testing</a>. As the documentation puts it, \"In general, most applications should prefer to store JSON data as jsonb, unless there are quite specialized needs, such as legacy assumptions about ordering of object keys.\"</p>\n<p>This flexibility is a really nice feature of PostgreSQL, allowing us to tailor our data storage strategy to different use cases within the same database. We can represent our data as JSON while we're editing it (which our UI layer is probably already doing anyway), then take full advantage of the traditional relational approach once our data is \"live.\" As an added bonus, we've even accidentally added support for an \"undo\" feature in the UI—to restore a previous state, simply retrieve the JSON for an earlier version of the draft.</p>\n<p>JSON + PostgreSQL: Letting us have our relational cake and eat NoSQL too ;-)</p>","frontmatter":{"date":"January 20, 2019","path":"/posts/jsonb-drafts","title":"PostgreSQL Jsonb Use Case: Saving Drafts"}}},"pageContext":{}}