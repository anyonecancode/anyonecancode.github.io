{"data":{"markdownRemark":{"html":"<p>I am a full-stack software engineer currently at <a href=\"https://www.audible.com/\">Audible</a>. Before that, I was at <a href=\"https://www.spotify.com/\">Spotify</a> for six and a half years, which came after a few years at a small digital agency called <a href=\"https://sanbornagency.com/\">Sanborn Media Factory</a>, which came after the first time I was ever paid to program, at <a href=\"https://www.teachforamerica.org/\">Teach For America</a>. Before that I was working temp jobs and wondering if moving to NYC \"just to see what it was like\" had been such a great plan after all. But it worked out, so the answer is \"yes.\"</p>\n<p>My roots are in the front end, but I spend a fair bit of time working with databases, servers, back end APIs, and other server-side components. I've found that delivering a good user experience means making sure technical decision are focused on the user throughout all layers of the system. Does the UI do a good job letting the user know what's possible, and then faithfully capturing their intentions? Does the API allow for properly modeling those choices? Does the data persistence layer provide the needed reliability, efficiency, and flexibility to store and query these models? When something goes wrong, is the user left in the dark, or are they provided with alternate paths forward?</p>\n<p>In short, I try to make sure my technical decisions are optimizing for product, not process.</p>\n<p>The times I've been most successful at this have been with teams that prize collaboration and openness. Teams where I've had the chance to mentor and to be mentored, which practice strong intra-team communication practices such as documentation and constructive code reviews, and which expect (and find) leadership from all team members regardless of tenure, are invariably also the teams that have delivered most consistently on a great user experience.</p>\n<p>That's some broad context. How about specific technologies I've worked with?</p>\n<p>My strongest language is JavaScript, thanks to my long experience with it. The JavaScript ecosystem (in)famously changes quickly, but I find this to be a sign of healthy growth, and its fun to be a part of it. The trick to staying sane, in my opinion, is to focus on JavaScript as a language rather than worrying about keeping up with the latest library. It's an approach that's made moving from jQuery to Angular to React an adventure rather than a slog, and I'm excited for whatever comes next (I'm eyeing Vue.js right now, and it's also well past time I got into TypeScript).</p>\n<p>Server-side, I like to keep things simple -- I'm a fan of Express in Node and Flask in Python, complemented by NGINX as a reverse proxy and to serve up static assets if I'm not using a CDN. I've also been expanding my Java portfolio, and while that language's reputation for clunky verbosity isn't entirely undeserved, I've found that leaning into its object orientation can give you quite of a bit of expressive power for representing business logic in code. For databases, I like PostgreSQL, though NoSQL can be a better fit for some situations. For deploying the whole thing, I'm a big fan of Docker.</p>\n<p>If you're looking to get in touch with me, you can reach me through my [LinkedIn](</p>","frontmatter":{"date":"January 13, 2018","path":"/posts/about","title":"About"}}},"pageContext":{}}