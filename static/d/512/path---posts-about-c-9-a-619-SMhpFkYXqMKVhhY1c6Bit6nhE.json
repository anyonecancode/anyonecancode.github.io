{"data":{"markdownRemark":{"html":"<p>I am a full-stack software engineer currently at <a href=\"https://www.audible.com/\">Audible</a>. Before that, I was at <a href=\"https://www.spotify.com/\">Spotify</a> for six and a half years, which came after a few years at a small digital agency called <a href=\"https://sanbornagency.com/\">Sanborn Media Factory</a>, which came after the first time I was ever paid to program, at <a href=\"https://www.teachforamerica.org/\">Teach For America</a>. Before that I was working temp jobs and going to grad school and wondering if moving to NYC \"just to see what it was like\" had been such a great plan after all. But it worked out, so the answer is \"yes.\"</p>\n<p>My roots are in the front end, but I spend a fair bit of time working with database, servers, back end APIs, and other server-side components. I've found that delivering a good user experience means making sure technical decision are focused on the user throughout all layers of the system. Does the UI do a good job letting the user know what's possible, and then faithfully capturing their intentions? Does the API allow for properly modeling those choices? Does the data persistence layer provide the needed reliability, efficiency, and flexibility to store and query these models? When something goes wrong, is the user left in the dark, or are they provided with alternate paths forward?</p>\n<p>In short, I try to make sure my technical decisions are optimizing for product, not process.</p>\n<p>The times I've been most successful at this have been with teams that prize collaboration and openness. Teams where I've had the chance to mentor and to be mentored, which practice strong intra-team communication practices such as documentation and constructive code reviews, and which expect (and find) leadership from all team members regardless of tenure, are invariably also the teams that have delivered most consistently on a great user experience.</p>\n<p>That's some broad context. How about specific technologies I've worked with?</p>\n<p>My strongest language is JavaScript, thanks to my long experience with it. It's a language that's changed a lot since I first picked it up, both in terms of syntax (hello <code>=></code>, <code>const</code>, and <code>let</code>) and in libraries and frameworks (hello jQuery, Angular, and React). I actually find all this really exciting. All that growth, experimentation, and evolution is a sign of excitement and energy, and it's fun to be a part of it. The trick to staying sane, I've found, is to focus on JavaScript as a language rather than worrying overmuch about keeping up with the most cutting edge framework. Knowing the fundamentals of JavaScript, and taking the time to understand what problem a particular language or framework is attempting to solve, has made picking up new JS tools (either for personal work or professionally) enjoyable and achievable rather than intimidating.</p>\n<p>As far as frameworks go, I continue to be excited about what's happening with React, and I'd like to give Vue a try. On the language front, it's past time I pick up TypeScript, and having experimented with Elm, I'm curious about Reason/OCaml.</p>\n<p>On the server side, I like to keep things simple until they have to get complicated, making me a fan of Express in Node and Flask in Python, with NGINX as a reverse proxy. I've also been extending my Java portfolio. While its reputation for clunky verbosity isn't entirely undeserved, leaning into its object orientation can lend quite a bit of expressive power for representing business logic in your code.</p>\n<p>On the database end of things, I'm a PostgreSQL fan, though a NoSQL/document store sometimes makes for a better fit. One area I'm curious to explore is graph databases.</p>","frontmatter":{"date":"January 13, 2018","path":"/posts/about","title":"About"}}},"pageContext":{}}