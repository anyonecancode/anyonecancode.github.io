{"data":{"markdownRemark":{"html":"<p>I am a full-stack software engineer currently at <a href=\"https://www.audible.com/\">Audible</a>. Before that, I was at <a href=\"https://www.spotify.com/\">Spotify</a> for six and a half years, which came after a few years at a small digital agency called <a href=\"https://sanbornagency.com/\">Sanborn Media Factory</a>, which came after the first time I was ever paid to program, at <a href=\"https://www.teachforamerica.org/\">Teach For America</a>. Before that I was working temp jobs and going to grad school and wondering if moving to NYC \"just to see what it was like\" had been such a great plan after all. But it worked out, so the answer is \"yes.\"</p>\n<p>My roots are in the front end, but I spend a fair bit of time working with database, servers, back end APIs, and other server-side components. I've found that delivering a good user experience means making sure technical decision are focused on the user throughout all layers of the system. Does the UI do a good job letting the user know what's possible, and then faithfully capturing their intentions? Does the API allow for properly modeling those choices? Does the data persistence layer provide the needed reliability, efficiency, and flexibility to store and query these models? When something goes wrong, is the user left in the dark, or are they provided with alternate paths forward?</p>\n<p>In short, I try to make sure my technical decisions are optimizing for product, not process.</p>\n<p>The times I've been most successful at this have been with teams that prize collaboration and openness. Teams where I've had the chance to mentor and to be mentored, which practice strong intra-team communication practices such as documentation and constructive code reviews, and which expect (and find) leadership from all team members regardless of tenure, are invariably also the teams that have delivered most consistently on a great user experience.</p>\n<p>That's some broad context. How about specific technologies I've worked with?</p>\n<p>I've had the longest experience with front-end technologies. If I'm put on the spot and asked to write working, syntactically-correct code on a whiteboard, I usually reach for JavaScript. It's a language that's changed a lot since I first picked it up, both in terms of syntax (hello <code>=></code>, <code>const</code>, and <code>let</code>) and in libraries and frameworks (hello jQuery, Angular, and React). I actually find all this really exciting. All that growth, experimentation, and evolution is a sign of excitement and energy, and it's fun to be a part of it. The trick to staying sane, I've found, is to focus on JavaScript as a language rather than worrying overmuch about keeping up with the most cutting edge framework. Knowing the fundamentals of JavaScript, and taking the time to understand what problem a particular language or framework is attempting to solve, has made picking up new JS tools (either for personal work or professionally) enjoyable and achievable rather than intimidating.</p>\n<p>During the coming year, I'm looking to get into recent React features such as hooks and context API, and give Vue and TypeScript a spin</p>\n<p>Much of the JS work I've been doing lately has been within the R\nI've found that focusing on JavaScript the language, as opposed to any given framework, has been the key to keeping up with the incredible growth and evolution in the JS ecosystem. From jQuery to Angular to React, I've found this approach has made keeping up with JavaScript exciting rather than exhausting. During the coming year, I'm looking to get into Vue and TypeScript -- at work if it comes up, on personal side projects if it does not.</p>\n<p>On specific technologies, I've worked with </p>\n<p>segue to working culture?\nClosely aligned with tha</p>\n<p>Cover: way I work,</p>\n<p>Tech I've use, tech I'm excited about\n..</p>\n<p>Some things I've worked wit</p>\n<p>jQuery, then Angular, these days a lot of React. Looking to pick up Vue. JS fatigue? It's exciting. Fundamentals -- know JS, know the prob frameworks is trying to solve, not so hard. Mainly just learning the syntax. Patterns.</p>\n<p>Python. More and more java. PHP back in the day.</p>\n<p>Paradigms. Functional programming. Given elm a spin.</p>\n<p>Intrigued by</p>\n<p>Collaborative. Mentor. Support. Deliver, but help others. If I deliver on time that's one developer delivering one thing. If I take the time to help out my colleagues, that's multiple able to work at a higher level.</p>\n<p>Enjoy working with data.</p>\n<p>Care about infrastructure and developer experience.</p>\n<p>A few things I'm excited about currently:</p>\n<ul>\n<li>graphql</li>\n<li>functional programming</li>\n</ul>\n<p>things I want to learn this year:</p>\n<ul>\n<li>elixir</li>\n<li>typescript</li>\n<li>yesod</li>\n<li>maybe rust</li>\n<li>vue</li>\n<li>kotlin</li>\n<li>graph databases</li>\n</ul>\n<p>Strong opinions, loosely held.</p>\n<p>Things I work with:</p>\n<ul>\n<li>java</li>\n</ul>\n<p>Things I like:</p>\n<ul>\n<li>postgres</li>\n<li>python</li>\n<li>java</li>\n<li>docker</li>\n</ul>","frontmatter":{"date":"January 13, 2018","path":"/posts/about","title":"About"}}},"pageContext":{}}